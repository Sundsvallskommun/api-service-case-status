openapi: 3.0.1
info:
  title: api-eventlog
  contact: { }
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: "2.0"
servers:
  - url: http://localhost:61273
    description: Generated server url
tags:
  - name: Events
    description: Event operations
paths:
  /{municipalityId}/{logKey}:
    get:
      tags:
        - Events
      summary: Fetch log events
      description: "Fetch log events for a specific logKey, with or without filtering\
        \ the result"
      operationId: getEvents
      parameters:
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
        - name: logKey
          in: path
          description: Events stored under this UUID
          required: true
          schema:
            type: string
          example: f0882f1d-06bc-47fd-b017-1d8307f5ce95
        - name: filter
          in: query
          description: "Syntax description: [spring-filter](https://github.com/turkraft/springfilter#syntax)"
          required: false
          schema:
            type: string
          example: metadata.key:'userId' and metadata.value:'john123'
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageEvent"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      tags:
        - Events
      summary: Create log event
      description: Creates a log event under logKey
      operationId: createEvent
      parameters:
        - name: municipalityId
          in: path
          description: Municipality id
          required: true
          schema:
            type: string
          example: 2281
        - name: logKey
          in: path
          description: Event will be stored under this UUID. Used to separate data under
            a unique id.
          required: true
          schema:
            type: string
          example: f0882f1d-06bc-47fd-b017-1d8307f5ce95
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
        required: true
      responses:
        "202":
          description: Successful operation
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /api-docs:
    get:
      tags:
        - API
      summary: OpenAPI
      operationId: getApiDocs
      responses:
        "200":
          description: OK
          content:
            application/yaml:
              schema:
                type: string
      x-auth-type: None
      x-throttling-tier: Unlimited
      x-wso2-mutual-ssl: Optional
components:
  schemas:
    Problem:
      type: object
      properties:
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        title:
          type: string
        detail:
          type: string
    StatusType:
      type: object
      properties:
        reasonPhrase:
          type: string
        statusCode:
          type: integer
          format: int32
    ConstraintViolationProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              className:
                type: string
              nativeMethod:
                type: boolean
        type:
          type: string
          format: uri
        status:
          $ref: "#/components/schemas/StatusType"
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
        title:
          type: string
        message:
          type: string
        instance:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        detail:
          type: string
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    ThrowableProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              className:
                type: string
              nativeMethod:
                type: boolean
        message:
          type: string
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        title:
          type: string
        detail:
          type: string
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    Violation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
    Event:
      required:
        - message
        - owner
        - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/EventType"
        municipalityId:
          type: string
          description: Municipality ID
          readOnly: true
          example: "2281"
        message:
          type: string
          description: Event description
          example: Request saved in database
        expires:
          type: string
          description: Date when event can be scheduled for delete. 'null' means never
          format: date-time
          nullable: true
          example: 2030-10-31T01:30:00+02:00
        owner:
          type: string
          description: Service that created event
          example: SupportManagement
        created:
          type: string
          description: Timestamp when the event was created
          format: date-time
          readOnly: true
          example: 2000-10-31T01:30:00+02:00
        historyReference:
          type: string
          description: Historical external reference to an immutable snapshot of data
          nullable: true
          example: fbe2fb67-005c-4f26-990f-1c95b5f6933e
        sourceType:
          type: string
          description: Source which the event refers to
          nullable: true
          example: errand
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/Metadata"
      description: Event model
    EventType:
      type: string
      description: |
        ## CRUD events:
        * `CREATE`
        * `READ`
        * `UPDATE`
        * `DELETE`
        ## System events:
        * `ACCESS` - login, logout, authorization, throttling
        * `EXECUTE` - send, queue, schedule, transfer, move
        * `CANCEL` - terminate, abort, decommission, kill
        * `DROP` - skip, omit, ignore, disregard
      enum:
        - CREATE
        - READ
        - UPDATE
        - DELETE
        - ACCESS
        - EXECUTE
        - CANCEL
        - DROP
    Metadata:
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
          description: The key
          example: userId
        value:
          type: string
          description: The value
          example: john123
      description: Metadata model
    PageEvent:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
  securitySchemes: { }
